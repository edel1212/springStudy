<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- 
		@Description : 1) Namespaces에 aop와 context를 추가한다
					   2) 필요한 패키지를 component를 scan한다
					   3) aop:aspectj 를 추가한다	 
					   4) 정상적으로 적용이 된다면 aop에 관련된 것들에는 화살표 표시가 생기고 mouse hover 시 Spring AOP .... 라는 메세지가 있음!
	 -->
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- Service Scan -->
	<context:component-scan base-package="org.zerock.service"/>
	<!-- Aop Scan -->
	<context:component-scan base-package="org.zerock.aop"/>
	<!-- aspectj add -->
	<aop:aspectj-autoproxy/>		
	
	<!--  ==================== Transaction setting ==================== -->
	<!-- 
		@Description : 1) Pom 에 jdbc 및 db, mybatis 설정을 추가 해주고 transaction 도  Maven에 추가해준다
					   2) root-context => Namespaces 에 AOP, context, mybatis, tx를 추가해준다
					   3) 그후 root-context에 datasource 설정 및 <tx:annotation-driven/> 을 추가해준다.
	 -->
	 
	 <!-- HicariCP Setting -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="jdbcUrl" value="jdbc:log4jdbc:mariadb://localhost:3310/yoodb"></property>
		<property name="username" value="root"/>
		<property name="password" value="123"/>
	</bean>
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>
	 
	 <!-- SessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	    <property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- Mapper Scan -->
	<mybatis-spring:scan base-package="org.zerock.mapper"/>
	
	<!--
		 @Description : 1) 트랜잭션을 관리하는 빈을 등록하고 어노테이션 기반으로 트랜잭션을
					       설정 할수 있도록 아래 태그를 작성한다.
					    
					    2) bean에 등록된 transactionManager와 tx:annotation-driven
					       설정이 추가된 후에는 트랜잭션이 필요한 상황을 만들어서 어노테이션을 추가하는
					       방식으로 설정하게 됨.
	 --> 
	<tx:annotation-driven/>
	
	 <bean id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
	 	<!-- ref="dataSource"는 내가 상단에 설정한 JDBC Bean Id 값임! -->
	 	<property name="dataSource" ref="dataSource"/>
	 </bean>
	 
	
</beans>
