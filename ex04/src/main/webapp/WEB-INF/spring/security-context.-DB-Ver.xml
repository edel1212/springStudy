<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- CustomAccessDeniedHandler 빈 주입  -->
	<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"/>
	
	<!-- CustomLoginSuccessHandler 빈 주입  -->
	<bean id="customloginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"/>
	
	<!-- CustomNoOpPasswordEncoder 빈 주입 : 우회용 -->
	<bean id="customPasswordEncoder" class="org.zerock.security.CustomNoOpPasswordEncoder"/>
	
	
	<security:http>
		<!-- URL별 권한 -->
		<security:intercept-url pattern="/sample/All" access="permitAll"/>
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>
		
		<!-- 로그인 핸들러 -->
		<security:form-login login-page="/customLogin" authentication-success-handler-ref="customloginSuccess"/>
		
		<!-- 잘못된 접근시 핸들러 -->
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<!-- 로그아웃 시 핸들러 -->
		<security:logout logout-url="/logout" logout-success-url="/" invalidate-session="true" />
	</security:http>			
		
	<!-- 인증과 권한 처리 -->
	<security:authentication-manager>
		<security:authentication-provider>
			<!-- ***************************************  -->
			<!-- @Descripton : 별도의 처리 시큐리티에서 정해져있는
							   테이블(컬럼포함)을 만든 후 JDBC만
							   연결 Mybatis를 사용하지 않고도 알아서
							   쿼리에 연결되는 것을 확인 할 수 있다
							   
							   ✅ 단 패스워드가 평문 처리가 되어있기에 500에러가 발생한다!
							      java.lang.IllegalArgumentException :
							      		There is no PasswordEncoder mapped for the id "null"
							   ✅ 스프링 5부터는 기본적으로 PasswordEncoder를 지정해야 하기 때문이다.
							   ✅ 따라서 encoder를 해줄 class 생성 및 빈 주입 후 provider에 등록해줌	
							     설정 후 URL에 ID, PW 를 사용해 접속하면 에러가 뜨지 않는 것을 확인 할 수 있다.
							      -->
			<!-- ***************************************  -->
			<!-- DB를 이용한 로그인 -->
			<security:jdbc-user-service data-source-ref="dataSource"/>
			<security:password-encoder ref="customPasswordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>
</beans>		