<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- ===============================================
		spring security는 단독으로 설정 할 수 있기 때문에
		기존의 root-context나 servlet-context와 는 별도로
		xml을 새로 만들어서 진행함!
		
		1) Namespaces에서 security 항목을 체크
		2) web.xml에 filter, filter-mapping, context-param 추가
		3) authentication-manager 추가
		
		주의 : xml의 상단 beans의 spring-security-?.xsd
		      버전을 지워줘야 xml 에러가 안남!
		
		      
		************************************************
		
		참고 ) 
		- 아래와 같이 설정하고 /sample/member로 이동할 시
		  자동으로 접근이 제한되어 login form으로 이동된다
		  이 페이지와 controller는 구현하지 않았지만 스프링 시큐리티가
		  기본으로 제공하는 페이지이고 테스트 용도로만 사용된다.      
		
		- 스프링 시큐리티에서 명심해야 하는 것 중 하나는 username이나 User
		  라는 용어의 의미가 일반적인 시스템에서의 의미와 차이가 있다는 것이다.
		  일반 시스템(userid) -> 스프링 시큐리티(username) 이다
		            
	================================================= -->
	
	<!-- ======================
			접근 제한 설정
		
		pattern : 인터셉터할 URL
		access  : 접근 시 체크할 권한	
	====================== -->
	<security:http >
	
		<security:intercept-url pattern="/sample/All" access="permitAll"/>
		
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
		
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>
		
		
		<!--  정규식을 사용하지 않아서 에러가 난다!! 사용하고 싶은 경우 scurity:http 부분에 설정 필요 하지만 권장하지 않음!-->
		<!--  <security:intercept-url pattern="/sample/blackGom" access="BLACK_GOM"/> --> 
		 
	
		<!-- Spring security 에서 지원하는 login form -->
		<security:form-login/>
		
		
		<!-- *************************************	
		    - 접근 거부 시 이동될 페이지 지정 Controller도 
			  구현해 줘야한다 @See : CommonController
			  
			- 접근 제한이 된 경우 다양한 처리를 하고싶다면 직접
			  AccessDeniedHandler 인터페이스를 구현하는 편이
			  더 좋다. 
			  * 예를 들어 접근이 제한 되었을 때 쿠키나
			    세션에 특정한 작업을 하거나 HttpServletResponse에
			    특정한 헤더 정보를 추가하는 등으 행위를 할수 있다.
		 ************************************* --> 
		<security:access-denied-handler error-page="/accessError" />  <!-- 기본 URL 설정 방식 -->
			
		<!-- @TODO : AccessDeniedHandler 구현 후 빈 주입 추가 사용하기 -->	
	</security:http>

	<security:authentication-manager>
	
		<!-- 인증과 권한에 대한 실제 처리를 하는 UserDetailsServcie -->
		<security:authentication-provider>
			<security:user-service>
				<!-- {noop} : 스프링5부터 패스워드 인코딩 처리가 필수이기 때문에 사용함 -->
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
				
				<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/>
				
				<!-- <security:user name="edel1212" password="{noop}gmrrha" authorities="ROLE_MEMBER, ROLE_ADMIN, BLACK_GOM"/> -->
			</security:user-service>
		</security:authentication-provider>
	
	</security:authentication-manager>
	

</beans>
