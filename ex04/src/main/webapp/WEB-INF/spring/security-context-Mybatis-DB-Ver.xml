<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
		
		<!-- CustomAccessDeniedHandler 빈 주입  -->
		<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"/>
		
		<!-- CustomLoginSuccessHandler 빈 주입  -->
		<bean id="customloginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"/>
		
		<!-- BCryptPasswordEncoder 빈 주입  -->
		<bean id="bcryptPasswordEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
		
		<security:http>
			<!-- URL별 권한 -->
			<security:intercept-url pattern="/sample/All" access="permitAll"/>
			<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
			<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>
			
			<!-- 로그인 핸들러 -->
			<security:form-login login-page="/customLogin" authentication-success-handler-ref="customloginSuccess"/>
			
			<!-- 잘못된 접근시 핸들러 -->
			<security:access-denied-handler ref="customAccessDenied"/>
			
			<!-- 로그아웃 시 핸들러 -->
			<security:logout logout-url="/logout" logout-success-url="/" invalidate-session="true" />
		</security:http>	
		
		<!-- 인증과 권한 처리 -->
		<security:authentication-manager>
			<security:authentication-provider>
				<!-- ***************************************  -->
				<!-- @Descripton : security:password-encoder에서 사용된
				           		    BCryptPasswordEncoder는 스프링 시큐리티에서
				           		    제공되는 클래스이다 그래서 따로 만들어줄 필요가 없디
								   
								   ✅ 해당 클래스를 이용해서 패스워드를 암호화 하여 처리하록 설정한다
								      체크하는 쪽에서는 암호화된 패스워드가 가능한 패스워드인지만 확인하고 다시 
								      원문으로 되돌리지 못하는 단방향 암호화 방법이다
								      -->
				<!-- ***************************************  -->
				<!-- DB를 이용한 로그인 :: dataSources는 root-context에서 bean 주입함 -->
				<!-- <security:jdbc-user-service data-source-ref="dataSource"/> -->
				
				<!-- DB를 이용한 로그인[ 내가 만든 table 사용 ]
					 ✅ users-by-username-query :: 계정정보
					 ✅ authorities-by-username-query :: 권한 
				  -->
				<security:jdbc-user-service data-source-ref="dataSource" 
					users-by-username-query="SELECT userid, userpw, enabled FROM tbl_member WHERE userid = ?"
					authorities-by-username-query="SELECT userid, auth FROM tbl_member_auth WHERE userid = ?" />
				
				<!-- security에서 제공하는 클래스를 불러서 빈으로 만든 후 암호화에 사용 -->
				<security:password-encoder ref="bcryptPasswordEncoder"/>
			</security:authentication-provider>
		</security:authentication-manager>
		
</beans>		