<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
		
		<!-- CustomAccessDeniedHandler 빈 주입  -->
		<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"/>
		
		<!-- CustomLoginSuccessHandler 빈 주입  -->
		<bean id="customloginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"/>
		
		<!-- BCryptPasswordEncoder 빈 주입  -->
		<bean id="bcryptPasswordEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
		
		<!-- CustomUserDetailsService 빈 주입  -->
		<bean id="customUserDetailsService"  class="org.zerock.security.CustomUserDetailsService"/>
		
		<security:http>
		<!-- URL별 권한 -->
			<security:intercept-url pattern="/sample/All" access="permitAll"/>
			<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
			<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>
			
			<!-- 로그인 핸들러 -->
			<!-- ====================================================================
				login-processing-url               : 클라이언트 단에서 로그인 정보를 넘김 URL
				login-page                         : 로그인 페이지 PageURL [ "/ABC/DEG/customLogin" ]로 하면 해당 URL을 찾아감!
				authentication-success-handler-ref : 성공시 타게될 Handler 빈주입 설정 필요
			==================================================================== -->
			<security:form-login login-page="/customLogin" authentication-success-handler-ref="customloginSuccess"/>
			
			<!-- 잘못된 접근시 핸들러 -->
			<security:access-denied-handler ref="customAccessDenied"/>
			
			<!-- 로그아웃 시 핸들러 -->
			<security:logout logout-url="/logout" logout-success-url="/" invalidate-session="true" />
			
			<!--
				자동로그인 설정 :: 커스텀하여 사용할 것이 아니라면 시큐르티 구조에 맞는 table이 생성되어 있어야함 
				               ex) CREATE TABLE persistent_logins (
									username VARCHAR(64) NOT NULL
									, series VARCHAR(64) PRIMARY KEY
									, token VARCHAR(64) NOT null
									, last_used TIMESTAMP NOT null
								)
									
				✅ @see: customLogin.jsp 에서 확인해보면 checkbox[name='rememeber-me']를 사용하여
				   확인 유무를 전달하는것으 확인 할 수 있다.					
			-->
			<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>
			
			<!-- 로그아웃 시 쿠키삭제 -->
			<security:logout logout-url="/logout" logout-success-url="/" invalidate-session="true"
				delete-cookies="remember-me,JSESSION_ID" /> <!-- JSESSION_ID는 톰겟에서 발행한 쿠키의 이름이다 -->
		</security:http>	
		
		<!-- 인증과 권한 처리 -->
		<security:authentication-manager>
			<!-- UserDetailsService를 이용한 로그인처리 
					 ✅ 상단에 bean으로 주입해준 CustomUserDetailsService를 사용
					    해당 빈은 UserDetailsService구현한 구현체이며
					    로그인 시 Custom 한 service 로직을 사용함
					    @see : CustomUserDetailsService.java -->		
			<security:authentication-provider user-service-ref="customUserDetailsService">
				<!-- security에서 제공하는 클래스를 불러서 빈으로 만든 후 암호화에 사용 -->
				<security:password-encoder ref="bcryptPasswordEncoder"/>
			</security:authentication-provider>
		</security:authentication-manager>
		
</beans>		